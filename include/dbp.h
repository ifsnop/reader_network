/*
reader_network - A package of utilities to record and work with
multicast radar data in ASTERIX format. (radar as in air navigation
surveillance).

Copyright (C) 2002-2012 Diego Torres <diego dot torres at gmail dot com>

This file is part of the reader_network utils.

reader_network is free software: you can redistribute it and/or modify
it under the terms of the Lesser GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

reader_network is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with reader_network. If not, see <http://www.gnu.org/licenses/>.
*/


struct datablock_plot {
    unsigned char sac; 			//	CAT01 CAT02 CAT08 CAT10
    unsigned char sic;			//	CAT01 CAT02 CAT08 CAT10
    int cat; 				// 	 // categoria original de la info
    int type; 				//	CAT01 CAT02 CAT08  CAT10 CAT34 CAT48 // psr-ssr-cmb-track/pasonorte.../sop-eop.../
    int source;                         //      CAT10 (channel 1 or channel 2)
    union {
        float rho;			//	CAT01 CAT48
        float x;                        //      CAT20
    };
    union {
        float theta;			//	CAT01 CAT48
        float y;                        //      CAT20
    };
    int modea;				//	CAT01
    int modec   ;			//	CAT01 CAT48 (expresado en FL)
    int modec_status;			//	CAT01
    int modea_status;			//	CAT01
    int available;			//	CAT01 CAT48

    union {                                     //      CAT48
        struct {
            int modes_address;
            unsigned char aircraft_id[9];
            unsigned char di048_230_com;
            unsigned char di048_230_stat;
            unsigned char di048_230_si;
            unsigned char di048_230_mssc;
            unsigned char di048_230_arc;
            unsigned char di048_230_aic;
            unsigned char di048_230_b1a;
            unsigned char di048_230_b1b;
            unsigned char bds_00[8];
            unsigned char bds_10[8];
            unsigned char bds_17[8];
            unsigned char bds_30[7];
            unsigned char bds_40[8];
            unsigned char bds_44[8];
            unsigned char bds_50[8];
            unsigned char bds_60[8];
            int modes_status;
            int bds_available;
        };
        struct {
            int radar_responses;		//	CAT01
            int plot_type; 			//	CAT10
            unsigned int track_plot_number; 	//	CAT01
            int flag_test;			//	CAT01 plot/track (si es blanco de test, = 1) CAT10 CAT21
            int flag_ground;			//	CAT10 CAT21
            int flag_sim;			//	CAT10 CAT21
            int flag_fixed;			//	CAT10 CAT21
            float truncated_tod;		//	CAT01
        };
    };
    float tod;				//	CAT01 CAT02 CAT08 CAT10
    float tod_stamp;			//	CAT01 CAT02 CAT08 CAT10
    unsigned long id;			// 	id
    unsigned long index;		//	index if available
};

struct bds30 {
    unsigned char ara41;        //      CAT48
    unsigned char ara42;        //      CAT48
    unsigned char ara43;        //      CAT48
    unsigned char ara44;        //      CAT48
    unsigned char ara45;        //      CAT48
    unsigned char ara46;        //      CAT48
    unsigned char ara47;        //      CAT48
    unsigned char rac55;        //      RAC (RACs record). This 4-bit (55-58) subfield shall indicate
    unsigned char rac56;        //          all the currently active RACs, if any, received from other
    unsigned char rac57;        //          ACAS aircraft. The bits in RAC shall have the following
    unsigned char rac58;        //          meanings:
    unsigned char rat59;        //      RAT (RA terminated indicator). This 1-bit (59) subfield shall
                                //          indicate when an RA previously generated by ACAS has
                                //          ceased being generated.
    unsigned char mte60;        //      MTE (multiple threat encounter). This 1-bit (60) subfield
                                //          shall indicate whether two or more simultaneous threats
                                //          are currently being processed by the ACAS threat
                                //          resolution logic.
    unsigned char tti61;        //      TTI (threat type indicator subfield). This 2-bit subfield (61-62)
                                //          shall define the type of identity data contained in the TID
                                //          subfield.
    union {
        struct {
            int tid;            //      threat identity data mode s
        };
        struct {                //      threat identity data ssr
            int tida;           //      altitude
            int tidr;           //      range
            int tidb;           //      bearing
        };
    };
};
